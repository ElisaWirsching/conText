% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_nns.R
\name{get_nns}
\alias{get_nns}
\title{Given a corpus and a set of candidate neighbors, find the top N nearest
neighbors.}
\usage{
get_nns(
  x,
  N = 10,
  groups = NULL,
  candidates = character(0),
  pre_trained,
  transform = TRUE,
  transform_matrix,
  bootstrap = TRUE,
  num_bootstraps = 10,
  what = "word",
  as_list = TRUE
)
}
\arguments{
\item{x}{a (quanteda) corpus or character vector}

\item{N}{(numeric) number of nearest neighbors to return}

\item{groups}{grouping variable equal in length to the number of documents}

\item{candidates}{(character) vector of features to consider as candidates to be nearest neighbor
You may for example want to only consider features that meet a certian count threshold
or exclude stop words etc. To do so you can simply identify the set of features you
want to consider and supply these as a character vector in the \code{candidates} argument.}

\item{pre_trained}{a F x D matrix of numeric values corresponding to pretrained embeddings
F = number of features and D = embedding dimensions.
rownames(pre_trained) = set of features for which there is a pre-trained embedding}

\item{transform}{(logical) if TRUE (default) apply the \verb{a la carte} transformation,
if FALSE ouput untransformed averaged embedding}

\item{transform_matrix}{a D x D matrix of numeric values corresponding
to the `a la carte`` transformation matrix}

\item{bootstrap}{(logical) if TRUE, bootstrap nns - sample from corpus with replacement;
if groups defined, sampling is automatically stratified; top nns are those with
the highest average over all bootstrap samples.}

\item{num_bootstraps}{(integer) number of bootstraps to use}

\item{what}{character; which quanteda tokenizer to use. You will rarely want to change this.
For Chinese texts you may want to set what = 'fastestword'.}

\item{as_list}{(logical) if FALSE all results are combined into a single data.frame
If TRUE, a list of data.frames is returned with one data.frame per target.}
}
\value{
a \code{data.frame} or list of data.frames (one for each target)
with the following columns:
\item{\code{target}}{ (character) vector with the rownames of the dfm,
either defining the groups or the target terms}.
\item{\code{feature}}{(character) vector of features from the candidate set,
one instance for each target.}
\item{\code{value}}{(numeric) cosine similarity between target
and candidate (mean of boostraps if boostrap = TRUE).}
\item{\code{std.error}}{(numeric) sd of bootstrapped cosine similarities
if bootstrap = TRUE, if FALSE, column is dropped.}
}
\description{
Given a corpus and a set of candidate neighbors, find the top N nearest
neighbors.
}
\examples{

library(quanteda)

immig_corpus <- corpus_context(x = cr_sample_corpus,
pattern = "immigration", window = 6L, verbose = TRUE)

get_nns(x = immig_corpus, N = 10,
groups = docvars(immig_corpus, 'party'),
candidates = character(0),
pre_trained = glove_subset,
transform = TRUE,
transform_matrix = khodakA,
bootstrap = TRUE,
num_bootstraps = 10,
as_list = FALSE)
}
\keyword{get_nns}
