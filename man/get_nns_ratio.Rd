% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_nns_ratio.R
\name{get_nns_ratio}
\alias{get_nns_ratio}
\title{Given a corpus and a binary grouping variable, computes the ratio of cosine similarities
over the union of their respective N nearest neighbors.}
\usage{
get_nns_ratio(
  x,
  N = 10,
  groups = NULL,
  numerator = NULL,
  candidates = character(0),
  pre_trained,
  transform = TRUE,
  transform_matrix,
  bootstrap = TRUE,
  num_bootstraps = 10,
  permute = TRUE,
  num_permutations = 100,
  what = "word"
)
}
\arguments{
\item{x}{a (quanteda) corpus or character vector}

\item{N}{number of nearest neighbors to consider
Note: if nearest neighbors overlap, the resulting number of features
will be fewer than 2*N.}

\item{groups}{a character or factor variable equal in length to the number of documents}

\item{numerator}{(character)}

\item{candidates}{character vector delimiting the features to consider as nearest neighbor candidates}

\item{pre_trained}{a F x D matrix of numeric values corresponding to pretrained embeddings
F = number of features and D = embedding dimensions.
rownames(pre_trained) = set of features for which there is a pre-trained embedding}

\item{transform}{(logical) if TRUE (default) apply the \verb{a la carte} transformation,
if FALSE ouput untransformed averaged embedding}

\item{transform_matrix}{a D x D matrix of numeric values corresponding
to the `a la carte`` transformation matrix}

\item{bootstrap}{(logical) if TRUE, bootstrap nns - sample from corpus with replacement;
if groups defined, sampling is automatically stratified; top nns are those with
the highest average over all bootstrap samples.}

\item{num_bootstraps}{(integer) number of bootstraps to use}

\item{permute}{(logical) if TRUE, compute empirical p-values using permutation test}

\item{num_permutations}{(numeric) number of permutations to use}

\item{what}{character; which quanteda tokenizer to use. You will rarely want to change this.
For Chinese texts you may want to set what = 'fastestword'.}
}
\value{
a \code{data.frame} with following columns:
\item{\code{feature}}{(character) vector of features from the candidate set,
one instance for each target.}
\item{\code{value}}{(numeric) ratio of cosine similarities
(mean of boostraps if boostrap = TRUE).}
\item{\code{std.error}}{(numeric) sd of bootstrapped ratio
of cosine similarities if bootstrap = TRUE, if FALSE, column is dropped.}
\item{\code{p.value}}{(numeric) empirical p-value of bootstrapped ratio
of cosine similarities if permute = TRUE, if FALSE, column is dropped.}
}
\description{
Given a corpus and a binary grouping variable, computes the ratio of cosine similarities
over the union of their respective N nearest neighbors.
}
\examples{

library(quanteda)

# build corpus of contexts around immigration
immig_corpus <- corpus_context(x = cr_sample_corpus,
pattern = "immigration",
window = 6L,
verbose = TRUE)

local_vocab <- get_local_vocab(as.character(immig_corpus), pre_trained = glove_subset)

set.seed(42L)
get_nns_ratio(x = immig_corpus,
N = 20,
groups = docvars(immig_corpus, 'party'),
numerator = "R",
candidates = local_vocab,
pre_trained = glove_subset,
transform = TRUE,
transform_matrix = khodakA,
bootstrap = TRUE,
num_bootstraps = 10,
permute = TRUE,
num_permutations = 10)

}
\keyword{get_nns_ratio}
